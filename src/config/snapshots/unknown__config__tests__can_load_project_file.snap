---
source: src/config/tests.rs
expression: "parse_project_file(&source).map_err(|e| miette::Report::new(e.0))"
---
Ok(
    ProjectDefinition {
        project: "my_project",
        dependencies: DependencyBlock {
            projects: [
                ConfigPath {
                    span: SourceSpan {
                        offset: SourceOffset(
                            81,
                        ),
                        length: SourceOffset(
                            18,
                        ),
                    },
                    inner: "../other_project",
                },
            ],
        },
        tasks: TaskBlock {
            imports: [
                ConfigPath {
                    span: SourceSpan {
                        offset: SourceOffset(
                            521,
                        ),
                        length: SourceOffset(
                            11,
                        ),
                    },
                    inner: "/.tasks/*",
                },
                ConfigPath {
                    span: SourceSpan {
                        offset: SourceOffset(
                            574,
                        ),
                        length: SourceOffset(
                            16,
                        ),
                    },
                    inner: ".tasks/my_task",
                },
            ],
            tasks: [
                TaskDefinition {
                    name: "build",
                    commands: [
                        "cargo build",
                    ],
                    requires: [
                        TaskRequires {
                            task: "generate",
                            target: Some(
                                "^self",
                            ),
                        },
                    ],
                    input_blocks: [
                        InputBlock {
                            paths: [
                                Glob(
                                    Glob {
                                        glob: "whatever.txt",
                                        re: "(?-u)^whatever\\.txt$",
                                        opts: GlobOptions {
                                            case_insensitive: false,
                                            literal_separator: false,
                                            backslash_escape: true,
                                        },
                                        tokens: Tokens(
                                            [
                                                Literal(
                                                    'w',
                                                ),
                                                Literal(
                                                    'h',
                                                ),
                                                Literal(
                                                    'a',
                                                ),
                                                Literal(
                                                    't',
                                                ),
                                                Literal(
                                                    'e',
                                                ),
                                                Literal(
                                                    'v',
                                                ),
                                                Literal(
                                                    'e',
                                                ),
                                                Literal(
                                                    'r',
                                                ),
                                                Literal(
                                                    '.',
                                                ),
                                                Literal(
                                                    't',
                                                ),
                                                Literal(
                                                    'x',
                                                ),
                                                Literal(
                                                    't',
                                                ),
                                            ],
                                        ),
                                    },
                                ),
                                Glob(
                                    Glob {
                                        glob: "whatever/**",
                                        re: "(?-u)^whatever/.*$",
                                        opts: GlobOptions {
                                            case_insensitive: false,
                                            literal_separator: false,
                                            backslash_escape: true,
                                        },
                                        tokens: Tokens(
                                            [
                                                Literal(
                                                    'w',
                                                ),
                                                Literal(
                                                    'h',
                                                ),
                                                Literal(
                                                    'a',
                                                ),
                                                Literal(
                                                    't',
                                                ),
                                                Literal(
                                                    'e',
                                                ),
                                                Literal(
                                                    'v',
                                                ),
                                                Literal(
                                                    'e',
                                                ),
                                                Literal(
                                                    'r',
                                                ),
                                                RecursiveSuffix,
                                            ],
                                        ),
                                    },
                                ),
                            ],
                            env_vars: [
                                "xyz",
                            ],
                            commands: [
                                "",
                            ],
                        },
                    ],
                },
            ],
        },
    },
)
