project "my_project"
// TODO: need a way to do tags.

dependencies {
    project "other_project"
    path "lib/whatever"

    // maybe want to be able to import deps from lang specific files?
    // not going to implement that yet though
    //import "Cargo.lock"
    //import "package.json"
}

// Given how nested this block has ended up looking,
// I wonder if tasks should just be top-level entities.
// Would at least knock one annoying indentation off this...
tasks {
    // Could maybe have a way to specify a task directory
    import "/.tasks/*"
    // and an individual file
    import ".tasks/my_task"

    // A way to import a specific template?
    // These would presumably be named top-level things?
    // Not sure, needs more thought.
    //import_template "blah-de-blah"

    // And also a way to specify a task inline here.
    task "build" {
        // The command to run
        command "cargo build"

        // Not sure about this syntax, but want a way to specify which
        // tasks should be run before this, and for what part (if any)
        // of the project dependency tree
        dependency task="generate" for-project-deps=true

        // Of course that's where the hard part of the problem is.
        // Can't determine whether a task needs to be re-run if we don't
        // know its inputs.  Although tbf, inputs are probably easier than
        // outputs.
        // Also, is this hard?  Inputs could default to all files in the
        // current project, which is not too difficult.

        inputs {
            // Specify a file as an input
            path "whatever.txt"

            // Specify a whole directory tree as an input
            path "whatever/**"

            // Specify an environment variable as an input
            // TODO: Think on the name for this one as well.
            env_var "xyz"

            // Specify the output of a command as an input
            // TODO: think of a better name for this one.
            command ""
        }

        // Outputs are a tricky one though aren't they.  Lets think about
        // them.

        // Outputs shouldn't be required unless I want to start getting into
        // caching.  tbf outputs could let me avoid recomputing downstreams
        // which would be nice.  Although I really want to avoid having
        // that mess
    }
}
